-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Toast.SkelToast where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Toast.AbsToast

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Toast.AbsToast.Ident -> Result
transIdent x = case x of
  Toast.AbsToast.Ident string -> failure x

transProgram :: Show a => Toast.AbsToast.Program' a -> Result
transProgram x = case x of
  Toast.AbsToast.Prg _ stmts -> failure x

transArg :: Show a => Toast.AbsToast.Arg' a -> Result
transArg x = case x of
  Toast.AbsToast.Ar _ type_ ident -> failure x
  Toast.AbsToast.ArgRef _ type_ ident -> failure x

transBlock :: Show a => Toast.AbsToast.Block' a -> Result
transBlock x = case x of
  Toast.AbsToast.Blk _ stmts -> failure x

transStmt :: Show a => Toast.AbsToast.Stmt' a -> Result
transStmt x = case x of
  Toast.AbsToast.Empty _ -> failure x
  Toast.AbsToast.BStmt _ block -> failure x
  Toast.AbsToast.Decl _ type_ items -> failure x
  Toast.AbsToast.Ass _ ident expr -> failure x
  Toast.AbsToast.Incr _ ident -> failure x
  Toast.AbsToast.Decr _ ident -> failure x
  Toast.AbsToast.Ret _ expr -> failure x
  Toast.AbsToast.VRet _ -> failure x
  Toast.AbsToast.Cond _ expr block -> failure x
  Toast.AbsToast.CondElse _ expr block1 block2 -> failure x
  Toast.AbsToast.While _ expr block -> failure x
  Toast.AbsToast.Break _ -> failure x
  Toast.AbsToast.Continue _ -> failure x
  Toast.AbsToast.SPrint _ expr -> failure x
  Toast.AbsToast.FnDef _ type_ ident args block -> failure x

transItem :: Show a => Toast.AbsToast.Item' a -> Result
transItem x = case x of
  Toast.AbsToast.NoInit _ ident -> failure x
  Toast.AbsToast.Init _ ident expr -> failure x

transType :: Show a => Toast.AbsToast.Type' a -> Result
transType x = case x of
  Toast.AbsToast.TInt _ -> failure x
  Toast.AbsToast.TStr _ -> failure x
  Toast.AbsToast.TBool _ -> failure x

transExprArg :: Show a => Toast.AbsToast.ExprArg' a -> Result
transExprArg x = case x of
  Toast.AbsToast.EArg _ expr -> failure x
  Toast.AbsToast.EArgRef _ ident -> failure x

transExpr :: Show a => Toast.AbsToast.Expr' a -> Result
transExpr x = case x of
  Toast.AbsToast.EVar _ ident -> failure x
  Toast.AbsToast.ELitInt _ integer -> failure x
  Toast.AbsToast.ELitTrue _ -> failure x
  Toast.AbsToast.ELitFalse _ -> failure x
  Toast.AbsToast.EApp _ ident exprargs -> failure x
  Toast.AbsToast.EString _ string -> failure x
  Toast.AbsToast.Neg _ expr -> failure x
  Toast.AbsToast.Not _ expr -> failure x
  Toast.AbsToast.EMul _ expr1 mulop expr2 -> failure x
  Toast.AbsToast.EAdd _ expr1 addop expr2 -> failure x
  Toast.AbsToast.ERel _ expr1 relop expr2 -> failure x
  Toast.AbsToast.EAnd _ expr1 expr2 -> failure x
  Toast.AbsToast.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Toast.AbsToast.AddOp' a -> Result
transAddOp x = case x of
  Toast.AbsToast.Plus _ -> failure x
  Toast.AbsToast.Minus _ -> failure x

transMulOp :: Show a => Toast.AbsToast.MulOp' a -> Result
transMulOp x = case x of
  Toast.AbsToast.Times _ -> failure x
  Toast.AbsToast.Div _ -> failure x
  Toast.AbsToast.Mod _ -> failure x

transRelOp :: Show a => Toast.AbsToast.RelOp' a -> Result
transRelOp x = case x of
  Toast.AbsToast.LTH _ -> failure x
  Toast.AbsToast.LE _ -> failure x
  Toast.AbsToast.GTH _ -> failure x
  Toast.AbsToast.GE _ -> failure x
  Toast.AbsToast.EQU _ -> failure x
  Toast.AbsToast.NE _ -> failure x
