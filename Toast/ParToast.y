-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Toast.ParToast
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified Toast.AbsToast
import Toast.LexToast

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '%'        { PT _ (TS _ 3)  }
  '&'        { PT _ (TS _ 4)  }
  '&&'       { PT _ (TS _ 5)  }
  '('        { PT _ (TS _ 6)  }
  ')'        { PT _ (TS _ 7)  }
  '*'        { PT _ (TS _ 8)  }
  '+'        { PT _ (TS _ 9)  }
  '++'       { PT _ (TS _ 10) }
  ','        { PT _ (TS _ 11) }
  '-'        { PT _ (TS _ 12) }
  '--'       { PT _ (TS _ 13) }
  '/'        { PT _ (TS _ 14) }
  ';'        { PT _ (TS _ 15) }
  '<'        { PT _ (TS _ 16) }
  '<='       { PT _ (TS _ 17) }
  '='        { PT _ (TS _ 18) }
  '=='       { PT _ (TS _ 19) }
  '>'        { PT _ (TS _ 20) }
  '>='       { PT _ (TS _ 21) }
  'Print'    { PT _ (TS _ 22) }
  'boolean'  { PT _ (TS _ 23) }
  'break'    { PT _ (TS _ 24) }
  'continue' { PT _ (TS _ 25) }
  'else'     { PT _ (TS _ 26) }
  'false'    { PT _ (TS _ 27) }
  'if'       { PT _ (TS _ 28) }
  'int'      { PT _ (TS _ 29) }
  'return'   { PT _ (TS _ 30) }
  'string'   { PT _ (TS _ 31) }
  'true'     { PT _ (TS _ 32) }
  'while'    { PT _ (TS _ 33) }
  '{'        { PT _ (TS _ 34) }
  '||'       { PT _ (TS _ 35) }
  '}'        { PT _ (TS _ 36) }
  L_Ident    { PT _ (TV _)    }
  L_integ    { PT _ (TI _)    }
  L_quoted   { PT _ (TL _)    }

%%

Ident :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Ident) }
Ident  : L_Ident { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Ident (tokenText $1)) }

Integer :: { (Toast.AbsToast.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (Toast.AbsToast.BNFC'Position, String) }
String   : L_quoted { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Program) }
Program
  : ListStmt { (fst $1, Toast.AbsToast.Prg (fst $1) (snd $1)) }

Arg :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Arg) }
Arg
  : Type Ident { (fst $1, Toast.AbsToast.Ar (fst $1) (snd $1) (snd $2)) }
  | Type '&' Ident { (fst $1, Toast.AbsToast.ArgRef (fst $1) (snd $1) (snd $3)) }

ListArg :: { (Toast.AbsToast.BNFC'Position, [Toast.AbsToast.Arg]) }
ListArg
  : {- empty -} { (Toast.AbsToast.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Block) }
Block
  : '{' ListStmt '}' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Blk (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListStmt :: { (Toast.AbsToast.BNFC'Position, [Toast.AbsToast.Stmt]) }
ListStmt
  : {- empty -} { (Toast.AbsToast.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Stmt) }
Stmt
  : ';' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Empty (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | Block { (fst $1, Toast.AbsToast.BStmt (fst $1) (snd $1)) }
  | Type ListItem ';' { (fst $1, Toast.AbsToast.Decl (fst $1) (snd $1) (snd $2)) }
  | Ident '=' Expr ';' { (fst $1, Toast.AbsToast.Ass (fst $1) (snd $1) (snd $3)) }
  | Ident '++' ';' { (fst $1, Toast.AbsToast.Incr (fst $1) (snd $1)) }
  | Ident '--' ';' { (fst $1, Toast.AbsToast.Decr (fst $1) (snd $1)) }
  | 'return' Expr ';' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Ret (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'if' '(' Expr ')' Block { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Cond (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Block 'else' Block { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.CondElse (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
  | 'while' '(' Expr ')' Block { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.While (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'break' ';' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Break (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | 'continue' ';' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Continue (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | 'Print' '(' Expr ')' ';' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.SPrint (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | Type Ident '(' ListArg ')' Block { (fst $1, Toast.AbsToast.FnDef (fst $1) (snd $1) (snd $2) (snd $4) (snd $6)) }

Item :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Item) }
Item
  : Ident { (fst $1, Toast.AbsToast.NoInit (fst $1) (snd $1)) }
  | Ident '=' Expr { (fst $1, Toast.AbsToast.Init (fst $1) (snd $1) (snd $3)) }

ListItem :: { (Toast.AbsToast.BNFC'Position, [Toast.AbsToast.Item]) }
ListItem
  : Item { (fst $1, (:[]) (snd $1)) }
  | Item ',' ListItem { (fst $1, (:) (snd $1) (snd $3)) }

Type :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Type) }
Type
  : 'int' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.TInt (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.TStr (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | 'boolean' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.TBool (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }

ListType :: { (Toast.AbsToast.BNFC'Position, [Toast.AbsToast.Type]) }
ListType
  : {- empty -} { (Toast.AbsToast.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

ExprArg :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.ExprArg) }
ExprArg
  : Expr { (fst $1, Toast.AbsToast.EArg (fst $1) (snd $1)) }
  | '&' Ident { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.EArgRef (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListExprArg :: { (Toast.AbsToast.BNFC'Position, [Toast.AbsToast.ExprArg]) }
ListExprArg
  : {- empty -} { (Toast.AbsToast.BNFC'NoPosition, []) }
  | ExprArg { (fst $1, (:[]) (snd $1)) }
  | ExprArg ',' ListExprArg { (fst $1, (:) (snd $1) (snd $3)) }

Expr6 :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Expr) }
Expr6
  : Ident { (fst $1, Toast.AbsToast.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, Toast.AbsToast.ELitInt (fst $1) (snd $1)) }
  | 'true' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.ELitTrue (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.ELitFalse (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | Ident '(' ListExprArg ')' { (fst $1, Toast.AbsToast.EApp (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, Toast.AbsToast.EString (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Expr) }
Expr5
  : '-' Expr6 { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Neg (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Not (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, Toast.AbsToast.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, Toast.AbsToast.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, Toast.AbsToast.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, Toast.AbsToast.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, Toast.AbsToast.EOr (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (Toast.AbsToast.BNFC'Position, [Toast.AbsToast.Expr]) }
ListExpr
  : {- empty -} { (Toast.AbsToast.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.AddOp) }
AddOp
  : '+' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Plus (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Minus (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.MulOp) }
MulOp
  : '*' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Times (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Div (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.Mod (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (Toast.AbsToast.BNFC'Position, Toast.AbsToast.RelOp) }
RelOp
  : '<' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.LTH (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.LE (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.GTH (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.GE (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.EQU (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1), Toast.AbsToast.NE (uncurry Toast.AbsToast.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err Toast.AbsToast.Program
pProgram = fmap snd . pProgram_internal
}

